% sealldev, privesc, linux, enum
@ linux-variables
; From https://github.com/sealldeveloper/navi-cheats/

# Find SUID binaries
find / -perm -u=s -type f 2>/dev/null

# Find SGID binaries
find / -user root -perm -6000 -exec ls -ldb {} \; 2>/dev/null

% sealldev, privsec, linux, enum, gtfobins, living off the landing
@ linux-variables
; This is essentially a bash-only interaction with GTFOBins
; The project was inspired by https://github.com/7Rocky/gtfobins-cli but
; I wanted it to work in Navi on it's own
; From https://github.com/sealldeveloper/navi-cheats/

# Check binary entries from GTFObins (gtfobins.github.io)
curl -s "https://gtfobins.github.io/gtfobins.json" | jq -r --arg bin "<binary>" '.[$bin] | if . then "\u001b[1;36mBinary: \($bin)\u001b[0m\n\u001b[1;33mFunctions: \(.functions | keys | join(", "))\u001b[0m\n\u001b[1;35mDescription: \(.description // "No description")\u001b[0m\n" + (.functions | to_entries | map("\n\u001b[1;34m=== \(.key) ===\u001b[0m\n" + (.value | map((if .description then "\u001b[1;31m\(.description)\u001b[0m\n\n" else "" end) + "\u001b[1;32m\(.code)\u001b[0m") | join("\n\u001b[1;90m• • •\u001b[0m\n"))) | join("\n\u001b[1;90m────────────────────\u001b[0m\n")) else "\u001b[1;31mBinary not found in GTFOBins\u001b[0m" end'

# Check a list of binary entries from GTFObins for a specific perm (gtfobins.github.io)
perm="<permission>"; tmpfile=$(mktemp); binfile=$(mktemp); curl -s "https://gtfobins.github.io/gtfobins.json" > "$tmpfile"; awk '{n=split($0,a,"/"); print a[n]}' <filename> | sort -u > "$binfile"; while IFS= read -r bin; do [ -n "$bin" ] && jq -r --arg bin "$bin" --arg perm "$perm" 'if .[$bin].functions[$perm] then (.[$bin].functions[$perm] | if type=="array" then . else [.] end | if length > 0 then ("\u001b[1;36mBinary: \($bin)\u001b[0m\n\u001b[1;33mFunction: \($perm)\u001b[0m\n\u001b[1;35mDescription: \([.[].description] | map(select(. != null)) | first // "No description")\u001b[0m\n\n\u001b[1;34m=== \($perm) ===\u001b[0m\n" + (map((if .description != null then "\u001b[1;31m" + .description + "\u001b[0m\n" else "" end) + "\u001b[1;32m" + .code + "\u001b[0m") | join("\n\u001b[1;90m• • •\u001b[0m\n")) + "\n\u001b[1;90m────────────────────\u001b[0m\n") else empty end) else empty end' "$tmpfile" 2>/dev/null; done < "$binfile"; rm -f "$tmpfile" "$binfile"

$ binary: curl -s "https://gtfobins.github.io/gtfobins.json" | jq -r 'to_entries[] | "\(.key) | \(.value.functions | keys | join(","))"' --- --header "Binary Name | Functions" --delimiter ' \| ' --column 1
$ permission: curl -s "https://gtfobins.github.io/gtfobins.json" | jq -r '[.[] | .functions | keys[]] | unique | .[]' --- --header "Available Functions/Permissions"